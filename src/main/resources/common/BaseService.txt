package ${package};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import java.security.Principal;
import java.util.Optional;

${projectAUthor}
public class BaseService<T> extends TopBaseService {

    /**
     *
     * @param params
     * @param abstractSpec
     * @return
     */
    @Transactional(rollbackFor = Exception.class)
    protected Page<T> findAllPageable(FindIto params , AbstractSpec abstractSpec ){
        Sort sortDef;
        if (!StringUtils.isEmpty(params.getQueryParams().getSortField())){
            sortDef = Sort.by(  new Sort.Order(
                    Sort.Direction.fromString(params.getQueryParams().getSortOrder().toUpperCase()),
                    params.getQueryParams().getSortField()
                )
            );
        }else {
            sortDef = Sort.by(org.springframework.data.domain.Sort.Order.asc("id"));
        }
        Pageable pageable = PageRequest.of(params.getQueryParams().getPageNumber()-1, params.getQueryParams().getPageSize(), sortDef);
        Page<T> dataRessult = dao.findAll(abstractSpec,pageable);
        return dataRessult;
    }
}
